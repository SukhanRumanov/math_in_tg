import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from image import process_image
from matematic import determine_and_solve
from database import insert_report, engine
from sympy import latex
from sqlalchemy.exc import SQLAlchemyError
from aiogram.types import FSInputFile
from generate_answer_on_image import process_math_expression

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7790375344:AAFM-T2hGdQvzCPmvsOBhj82S5DRIcJfywY"
IMAGE_DIR = "example_images"
ANSWER_IMAGE_DIR = "image_answer_photo"
ABS_PUTH ='C:/python/kur/'
processing_lock = asyncio.Lock()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class UserState(StatesGroup):
    waiting_for_math_expression = State()
    waiting_for_report = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(IMAGE_DIR, exist_ok=True)
os.makedirs(ANSWER_IMAGE_DIR, exist_ok=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/help"), KeyboardButton(text="/solve")],
            [KeyboardButton(text="/report"), KeyboardButton(text="/examples")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

async def save_report_to_db(user_id: int, text: str) -> bool:
    try:
        insert_report(user_id, text, engine)
        return True
    except SQLAlchemyError as e:
        logger.error(f"Database error: {e}")
        return False
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return False

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    welcome_text = """
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Math Solver Bot!</b> 

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–µ—à–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏:
- –ü–æ —Ñ–æ—Ç–æ üì∏
- –ü–æ —Ç–µ–∫—Å—Ç—É üìù

üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/solve - —Ä–µ—à–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
/report - —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ
"""
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.message(Command("help"))
async def help_command(message: Message, state: FSMContext):
    await state.clear()
    help_text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>

<b>1. –†–µ—à–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞

<b>2. –†–µ—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /solve

<b>3. –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:</b>
- –£—Ä–∞–≤–Ω–µ–Ω–∏—è: x^2 - 4 = 0
- –ò–Ω—Ç–µ–≥—Ä–∞–ª—ã: Integral(x^2, x)
- –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ: diff(sin(x))
- –ü—Ä–µ–¥–µ–ª—ã: Limit(sin(x)/x, x, 0)
- –õ–æ–≥–∞—Ä–∏—Ñ–º—ã: log(x, 2)

–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã: /examples
"""
    await message.answer(help_text)

@dp.message(Command("examples"))
async def examples_command(message: Message, state: FSMContext):
    await state.clear()
    examples_text = """
üìñ <b>–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</b>

<code>2 + 2 * 2</code> - –ø—Ä–æ—Å—Ç—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
<code>x^2 - 4 = 0</code> - —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
<code>Integral(x^2, x)</code> - –∏–Ω—Ç–µ–≥—Ä–∞–ª
<code>diff(sin(x))</code> - –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è
<code>Limit(sin(x)/x, x, 0)</code> - –ø—Ä–µ–¥–µ–ª
<code>log(8, 2)</code> - –ª–æ–≥–∞—Ä–∏—Ñ–º
"""
    await message.answer(examples_text)

@dp.message(Command("solve"))
async def solve_command(message: Message, state: FSMContext):
    await state.set_state(UserState.waiting_for_math_expression)
    solve_text = """
üßÆ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è</b>

–ü—Ä–∏–º–µ—Ä—ã:
<code>2 + 2 * 2</code>
<code>x^2 - 4 = 0</code>
<code>Integral(x^2, x)</code>
<code>diff(sin(x))</code>

–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /examples

‚ùå –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel
"""
    await message.answer(solve_text)

@dp.message(Command("report"))
async def report_command(message: Message, state: FSMContext):
    await state.set_state(UserState.waiting_for_report)
    await message.answer("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:\n\n‚ùå –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel")

@dp.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())

@dp.message(StateFilter(UserState.waiting_for_report))
async def handle_report(message: Message, state: FSMContext):
    try:
        success = await save_report_to_db(message.from_user.id, message.text)
        if success:
            await state.clear()
            await message.answer("‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=get_main_keyboard())
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∂–∞–ª–æ–±—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Error in handle_report: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∂–∞–ª–æ–±—ã.")
    finally:
        await state.clear()

@dp.message(StateFilter(UserState.waiting_for_math_expression))
async def handle_math_expression(message: Message, state: FSMContext):
    try:
        expression = message.text.strip()
        await message.answer("üßÆ –†–µ—à–∞—é –ø—Ä–∏–º–µ—Ä...")
        solution_photo = process_math_expression(expression) 

        image_path = os.path.join(solution_photo)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ solution —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
        photo = FSInputFile(image_path)
        await bot.send_photo(chat_id=message.chat.id, photo=photo)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.remove(image_path)   # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"–£–¥–∞–ª–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {image_path}")
        except Exception as delete_error:
            logger.error(f"Error deleting temp files: {delete_error}")
            
    except Exception as e:
        logger.error(f"Error processing photo: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")




@dp.message(lambda message: message.photo)
async def handle_photo(message: Message):
    async with processing_lock:  
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(IMAGE_DIR, exist_ok=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            photo = message.photo[-1]
            file_info = await bot.get_file(photo.file_id)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
            local_path = os.path.join(IMAGE_DIR, f"math_{timestamp}.jpg")

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await bot.download_file(file_info.file_path, local_path)
            await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            solution = process_image(local_path)
            print("=================")
            print(local_path)
            print(solution)
            print("=================")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            image_path = os.path.join(solution)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ solution —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
            photo = FSInputFile(image_path)
            await bot.send_photo(chat_id=message.chat.id, photo=photo)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                os.remove(local_path)  # –£–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
                os.remove(image_path)   # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                print(f"–£–¥–∞–ª–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {local_path}, {image_path}")
            except Exception as delete_error:
                logger.error(f"Error deleting temp files: {delete_error}")
            
        except Exception as e:
            logger.error(f"Error processing photo: {e}", exc_info=True)
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

       

@dp.message(F.text & ~F.text.startswith('/'))
async def handle_text(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø—Ä–∏–º–µ—Ä–æ–º", reply_markup=get_main_keyboard())

async def main():
    logger.info("Starting bot...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())